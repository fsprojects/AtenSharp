################################################################################
# AtenSharp's PR validation build
################################################################################

resources:
  containers:
  # - container: CentosContainer
  #  image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-mlnet-8bba86b-20190314145033
  
  - container: UbuntuContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-mlnet-207e097-20190312152303

phases:
- template: /build/ci/phase-template.yml
  parameters:
    name: Ubuntu_x64_NetCoreApp30
    buildScript: ./build.sh
    queue:
      name: Hosted Ubuntu 1604
      container: UbuntuContainer

- template: /build/ci/phase-template.yml
  parameters:
    name: MacOS_x64_NetCoreApp30
    buildScript: ./build.sh
    queue:
      name: Hosted macOS

- template: /build/ci/phase-template.yml
  parameters:
    name: Windows_x64_NetCoreApp30
    buildScript: build.cmd
    queue:
      name: Hosted VS2019

################################################################################
- phase: Linux_Build
################################################################################
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  queue:
    name: Hosted Ubuntu 1604
    container: UbuntuContainer
  steps:
  # Only build native assets to avoid conflicts.
  - script: ./build.sh -buildNative -$(BuildConfig) -skipRIDAgnosticAssets
    displayName: Build

  - task: PublishBuildArtifacts@1
    displayName: Publish Linux package assets
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/bin/obj/packages
      artifactName: PackageAssets
      artifactType: container

################################################################################
- phase: MacOS_Build
################################################################################
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  queue:
    name: Hosted macOS
  steps:
  - script: brew update && brew install libomp && brew link libomp --force
    displayName: Install build dependencies
  # Only build native assets to avoid conflicts.
  - script: ./build.sh -buildNative -$(BuildConfig) -skipRIDAgnosticAssets
    displayName: Build

  - task: PublishBuildArtifacts@1
    displayName: Publish macOS package assets
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/bin/obj/packages
      artifactName: PackageAssets
      artifactType: container

################################################################################
- phase: Windows_x64_Build
################################################################################
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
    _SignType: real
    _UseEsrpSigning: true
    _TeamName: DotNetCore
  queue:
    name: Hosted VS2019
  steps:

  # Build both native and managed assets. 
  - script: ./build.cmd -$(BuildConfig)
    displayName: Build

  - task: PublishBuildArtifacts@1
    displayName: Publish Windows_x64 package assets
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/bin/obj/packages
      artifactName: PackageAssets
      artifactType: container

  # Terminate all dotnet build processes.
  - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet.exe build-server shutdown
    displayName: Dotnet Server Shutdown

################################################################################
- phase: Package
################################################################################
  dependsOn:
  - Linux_Build
  - MacOS_Build
  # - Windows_x86_Build
  - Windows_x64_Build
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  queue:
    name: Hosted VS2019
  steps:

  # Download all agent packages from all previous phases
  - task: DownloadBuildArtifacts@0
    displayName: Download package assets
    inputs:
      artifactName: PackageAssets
      downloadPath: $(Build.SourcesDirectory)/bin/obj/packages
      parallelizationLimit: 1

  # Workaround https://github.com/Microsoft/vsts-tasks/issues/6739
  - task: CopyFiles@2
    displayName: Copy package assets to correct folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/obj/packages/PackageAssets
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packages/
  
  - script: ./build.cmd -release -buildPackages
    displayName: Create Packages

  - script: rm $(Build.SourcesDirectory)/bin/packages/*.symbols.*
    displayName: Remove symbols nuget

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages
      targetFolder: $(Build.ArtifactStagingDirectory)
 
  #  - script: |
  #      cp $(Build.SourcesDirectory)\bin\obj\packages*.nupkg $BUILD_ARTIFACTSTAGINGDIRECTORY
  #    # rm $BUILD_ARTIFACTSTAGINGDIRECTORY/*.symbols.nupkg
  #    displayName: Copy Nugets in staging directory

  #  - script: |
  #      dotnet publish --configuration $(buildConfiguration) --output $BUILD_ARTIFACTSTAGINGDIRECTORY
  #    displayName: Dotnet Publish

  # TODO: Deal with symbols.
  
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true))
  
  # Terminate all dotnet build processes.
  - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet.exe build-server shutdown
    displayName: Dotnet Server Shutdown
