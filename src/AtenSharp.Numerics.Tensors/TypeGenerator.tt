<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Buffers;
using System.Linq;
using System.Numerics.Tensors;
using System.Runtime.CompilerServices;
using AtenSharp;

namespace AtenSharp.Numerics.Tensors 
{
<#
foreach (var type in new [] { 
    new { ApiName = "Byte", Storage = "byte", AccReal="long" },
    new { ApiName = "Short", Storage = "short", AccReal="long" },   
    new { ApiName = "Int", Storage = "int",  AccReal="long"},
    new { ApiName = "Long", Storage = "long", AccReal="long" },
    new { ApiName = "Double", Storage = "double", AccReal="double" },
    new { ApiName = "Float", Storage = "float", AccReal="double" },
     }) {
        string tname = type.ApiName;
        string stname = type.Storage;
#>

    /// <summary>
    ///   Wrapper class used to surface a Aten <#=tname#>Tensor as a System.Numerics DensorTensor of <#=stname#>
    /// </summary>
    public sealed class <#=tname#>AtenTensor : DenseTensor<<#=stname#>>, IDisposable
    {
        internal sealed class <#=tname#>NativeMemory : MemoryManager<<#=stname#>>
        {
            private readonly <#=tname#>Tensor.<#=tname#>Storage storage;

            public <#=tname#>NativeMemory(<#=tname#>Tensor.<#=tname#>Storage storage)
            {
                if (storage.Size < 0)
                {
                    throw new ArgumentOutOfRangeException ("Length cannot be negative.");
                }

                storage.Retain ();
                this.storage = storage;        
            }

            /// <summary>
            /// Returns a span wrapping the underlying memory.
            /// Remember to Unpin the memory once the span is disposed.
            /// </summary>
            public override Span<<#=stname#>> GetSpan ()
            {
                ulong len = storage.Size;

                if (len > int.MaxValue)
                {
                    throw new InvalidCastException ("Tensor size not supported.");
                }

                unsafe
                {
                    return new Span<<#=stname#>> (storage.Data.ToPointer (), (int)len);
                }
            }

            /// <summary>
            /// Returns a handle to the memory that has been pinned and hence its address can be taken.
            /// </summary>
            /// <param name="elementIndex">The offset to the element within the memory at which the returned <see cref="MemoryHandle"/> points to. (default = 0)</param>
            public override MemoryHandle Pin (int elementIndex = 0)
            {
                if ((uint)elementIndex > storage.Size) 
                {
                    throw new ArgumentOutOfRangeException (nameof (elementIndex), "Index out of array bound.");
                }

                unsafe
                {
                    storage.Retain();
                    
                    void* pointer = Unsafe.Add<<#=stname#>> ((void*)storage.Data, elementIndex);
                    return new MemoryHandle (pointer, default, this);
                }
            }

            /// <summary>
            /// Lets the garbage collector know that the object is free to be moved now.
            /// </summary>
            public override void Unpin ()
            {
                storage.Free ();
            }

            protected override void Dispose (bool disposing)
            {
                if (disposing)
                {
                    storage.Free ();
                }
            }
        }

        private readonly <#=tname#>Tensor inner;

        /// <summary>
        ///   Property returning the inner AtenSharp tensor the class is wrapping. 
        /// </summary>
        public <#=tname#>Tensor AtenSharpTensor => inner;

        public <#=tname#>AtenTensor (Memory<<#=stname#>> memory, ReadOnlySpan<int> dimensions, <#=tname#>Tensor inner) : base (memory, dimensions)
        {
            this.inner = inner;
        }

        /// <summary>
        ///   Utility method to create a AtenTensor.
        ///   This is currently failing if the input parameter is empty because AtenSharp.Numerics.Tensors 
        ///   does not support zero-size tensors.
        /// </summary>
        /// <param name="sizes">The desired sizes for the dimensions of the tensor.</param>
        public static <#=tname#>AtenTensor Create (params int[] sizes)
        {
            var totLength = Utils.GetTotalLength (sizes);
            var shape = sizes;

            if (sizes.Length == 0)
            {
                shape = new int[] { 0 };
            }

            var inner = Create<#=tname#>Tensor (sizes.Select (x => (long)x).ToArray ());
            var mem = new <#=tname#>NativeMemory (inner.Storage);

            return new <#=tname#>AtenTensor (mem.Memory, shape, inner);
        }

        public void Dispose ()
        {
            inner.Dispose ();
        }

        /// <summary>
        /// Creates a shallow copy of this tensor, with new backing storage.
        /// </summary>
        /// <returns>A shallow copy of this tensor.</returns>
        public override Tensor<<#=stname#>> Clone ()
        {
            var innerClone = inner.Clone ();
            var mem = new <#=tname#>NativeMemory (innerClone.Storage);

            return new <#=tname#>AtenTensor (mem.Memory, Dimensions, innerClone);
        }

        /// <summary>
        /// Creates a new Tensor of a different type with the specified dimensions and the same layout as this tensor with elements initialized to their default value.
        /// </summary>
        /// <typeparam name="TResult">Type contained in the returned Tensor.</typeparam>
        /// <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
        /// <returns>A new tensor with the same layout as this tensor but different type and dimensions.</returns>
        public override Tensor<TResult> CloneEmpty<TResult> (ReadOnlySpan<int> dimensions)
        {
            switch (true)
            {
<#
            foreach (var itype in new [] { 
                new { ApiName = "Byte", Storage = "byte", AccReal="long" },
                new { ApiName = "Short", Storage = "short", AccReal="long" },   
                new { ApiName = "Int", Storage = "int",  AccReal="long"},
                new { ApiName = "Long", Storage = "long", AccReal="long" },
                new { ApiName = "Double", Storage = "double", AccReal="double" },
                new { ApiName = "Float", Storage = "float", AccReal="double" },
                 }) {
                    string itname = itype.ApiName;
                    string istname = itype.Storage;
#>
                case bool _ when typeof (TResult) == typeof (<#=istname#>):
                {
                    var innerClone = <#=itname#>AtenTensor.Create<#=itname#>Tensor (inner.Shape);
                    innerClone.Fill (default);
                    var mem = new <#=itname#>AtenTensor.<#=itname#>NativeMemory (innerClone.Storage);

                    return new <#=itname#>AtenTensor (mem.Memory, Dimensions, innerClone) as Tensor<TResult>;
                }
<#
             }
#>
                default: throw new NotImplementedException ($"Cloning type {typeof (TResult)} is not supported.");
            }
        }

        /// <summary>
        /// Reshapes the current tensor to new dimensions, using the same backing storage.
        /// </summary>
        /// <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
        /// <returns>A new tensor that reinterprets backing Buffer of this tensor with different dimensions.</returns>
        public override Tensor<<#=stname#>> Reshape (ReadOnlySpan<int> dimensions)
        {
            if (dimensions.Length == 0)
            {
                throw new ArgumentException ("Dimensions must contain elements.", nameof (dimensions));
            }

            var newSize = Utils.GetTotalLength (dimensions);

            if (newSize != Length)
            {
                throw new ArgumentException ($"Cannot reshape array due to mismatch in lengths, currently {Length} would become {newSize}.", nameof(dimensions));
            }

            <#=tname#>Tensor reshapedTensor;

            switch (dimensions.Length)
            {
                case 1:
                    reshapedTensor = inner.NewWithStorage1d (
                        UIntPtr.Zero, 
                        dimensions[0], 
                        1);
                    break;
                case 2:
                    reshapedTensor = inner.NewWithStorage2d (
                        UIntPtr.Zero, 
                        dimensions[0], 
                        dimensions[1], 
                        dimensions[1], 
                        1);
                    break;
                case 3:
                    reshapedTensor = inner.NewWithStorage3d (
                        UIntPtr.Zero, 
                        dimensions[0], 
                        dimensions[1] + dimensions[2],
                        dimensions[1], 
                        dimensions[2], 
                        dimensions[2], 
                        1);
                    break;
                case 4:
                    reshapedTensor = inner.NewWithStorage4d (
                        UIntPtr.Zero, 
                        dimensions[0], dimensions[1] + dimensions[2] + dimensions[3], 
                        dimensions[1], 
                        dimensions[2] + dimensions[3], 
                        dimensions[2], 
                        dimensions[3], 
                        dimensions[3], 
                        1);
                    break;
                 default: throw new ArgumentException ($"Cannot reshape tensor with more than 4 dimensions");
            }

            return new <#=tname#>AtenTensor (Buffer, dimensions, reshapedTensor);
        }

        /// <summary>
        ///   Creates a 1-4D tensor of the specified size(s).
        /// </summary>    
        /// <param name="dims">Sizes for the dimensions.</param>
        internal static <#=tname#>Tensor Create<#=tname#>Tensor (params long[] dims)
        {
            switch (dims.Length)
            {
                case 0:
                    return new <#=tname#>Tensor ();
                case 1:
                    return new <#=tname#>Tensor (dims[0]);
                case 2:
                    return new <#=tname#>Tensor (dims[0], dims[1]);
                case 3:
                    return new <#=tname#>Tensor (dims[0], dims[1], dims[2]);
                case 4:
                    return new <#=tname#>Tensor (dims[0], dims[1], dims[2], dims[3]);
                default:
                    throw new ArgumentOutOfRangeException (nameof (dims), "Maximum number of dimensions for tensor creation is 4.");
            }
        }
    }
<#
}
#>
}
