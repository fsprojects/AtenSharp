<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# var msg = "DO NOT EDIT" + " This is a generated file and will be overwritten, edit FileOperations.tt instead"; #>
/*
 * <#=msg#>
 */
using System;
using System.Runtime.InteropServices;
using AtenSharp;

namespace AtenSharp.IO
{

    public abstract partial class File : IDisposable
    {
<#
foreach (var type in new [] {
    new { ApiName = "Byte", AccReal="byte" },
    new { ApiName = "Char", AccReal="byte" },
    new { ApiName = "Short", AccReal="short" },
    new { ApiName = "Int", AccReal="int"},
    new { ApiName = "Long", AccReal="long" },
    new { ApiName = "Float", AccReal="float" },
    new { ApiName = "Double", AccReal="double" },
     }){
        string tname = type.ApiName;
        string accreal = type.AccReal;
#>
        [DllImport("caffe2")]
        private static extern <#=accreal#> THFile_read<#=tname#>Scalar(HType self);

        /// <summary>
        ///   Read one <#=accreal#> from the file.
        /// </summary>
        /// <returns>A <#=accreal#> read from the current file position.</returns>
        public <#=accreal#> Read<#=tname#>() { return THFile_read<#=tname#>Scalar(handle); }

        [DllImport("caffe2")]
        private static extern void THFile_write<#=tname#>Scalar(HType self, <#=accreal#> scalar);

        /// <summary>
        ///   Write one <#=accreal#> to the file.
        /// </summary>
        /// <param name="value">A <#=accreal#> to write at the current file position.</param>
        public void Write<#=tname#>(<#=accreal#> value) { THFile_write<#=tname#>Scalar(handle, value); }
<#      if (tname != "Char") { #>
        [DllImport("caffe2")]
        private static extern long THFile_read<#=tname#>(HType self, <#=tname#>Tensor.<#=tname#>Storage.HType storage);

        /// <summary>
        ///   Read <#=accreal#>s from the file into the given storage.
        /// </summary>
        /// <param name="storage">A storage object to read data into.</param>
        /// <returns>The number of <#=accreal#>s read.</returns>
        public long Read<#=tname#>s(<#=tname#>Tensor.<#=tname#>Storage storage) { return THFile_read<#=tname#>(handle, storage.handle); }

        [DllImport("caffe2")]
        private static extern long THFile_write<#=tname#>(HType self, <#=tname#>Tensor.<#=tname#>Storage.HType storage);

        /// <summary>
        ///   Write <#=accreal#>s to the file from the given storage.
        /// </summary>
        /// <param name="storage">A storage object fetch data from.</param>
        /// <returns>The number of <#=accreal#>s written.</returns>
        public long Write<#=tname#>s(<#=tname#>Tensor.<#=tname#>Storage storage) { return THFile_write<#=tname#>(handle, storage.handle); }
<#      } /* if */ #>
        [DllImport("caffe2")]
        private static extern long THFile_read<#=tname#>Raw(HType self, IntPtr data, long n);

        /// <summary>
        ///   Read <#=accreal#>s from the file into the given <#=accreal#> array.
        /// </summary>
        /// <param name="data">An array to place the data in after reading it from the file.</param>
        /// <param name="n">The maximum number of <#=accreal#>s to read.</param>
        /// <returns>The number of <#=accreal#>s read.</returns>
        public long Read<#=tname#>s(<#=accreal#>[] data, int n)
        {
            if (n < 0)
                throw new ArgumentOutOfRangeException("n cannot be less thab zero");
            if (n > data.Length)
                throw new ArgumentOutOfRangeException("n cannot be greater than data.Length");
            unsafe
            {
                fixed (<#=accreal#> *dest = data)
                {
                    var readItems = THFile_read<#=tname#>Raw(handle, (IntPtr)dest, n);
                    return readItems;
                }
            }
        }
<#      if (tname != "Char") { #>
        /// <summary>
        ///   Read <#=accreal#>s from the file into the given <#=accreal#> tensor.
        /// </summary>
        /// <param name="tensor">A tensor to place the data in after reading it from the file.</param>
        /// <returns>The number of <#=accreal#>s read.</returns>
        public long ReadTensor(AtenSharp.<#=tname#>Tensor tensor)
        {
            return THFile_read<#=tname#>Raw(handle, tensor.Data, tensor.NumElements);
        }
<#      } /* if */ #>
        [DllImport("caffe2")]
        private static extern long THFile_write<#=tname#>Raw(HType self, IntPtr data, long n);

        /// <summary>
        ///   Write <#=accreal#>s to the file from the given <#=accreal#> array.
        /// </summary>
        /// <param name="data">An array containing data to be written to the file.</param>
        /// <param name="n">The number of <#=accreal#>s to write. Pass -1 (default) to write the whole array.</param>
        /// <returns>The number of <#=accreal#>s written.</returns>
        public long Write<#=tname#>s(<#=accreal#>[] data, int n = -1)
        {
            if (n < -1)
                throw new ArgumentOutOfRangeException("n cannot be less than -1");
            n = (n == -1) ? data.Length : Math.Min(n, data.Length);
            unsafe
            {
                fixed (<#=accreal#> *dest = data)
                {
                    var writtenItems = THFile_write<#=tname#>Raw(handle, (IntPtr)dest, n);
                    return writtenItems;
                }
            }
        }
<#      if (tname != "Char") { #>
        /// <summary>
        ///   Write <#=accreal#>s to the file from the given <#=accreal#> tensor.
        /// </summary>
        /// <param name="tensor">A tensor containing data to be written to the file.</param>
        /// <returns>The number of <#=accreal#>s written.</returns>
        public long WriteTensor(AtenSharp.<#=tname#>Tensor tensor)
        {
            return THFile_write<#=tname#>Raw(handle, tensor.Data, tensor.NumElements);
        }
<#      } /* if */ } /* foreach */ #>
        [DllImport("caffe2")]
        private static extern long THFile_readChar(HType self, MemoryFile.CharStorage.HType storage);

        /// <summary>
        ///   Read chars from the file into the given storage.
        /// </summary>
        /// <param name="storage">A storage object to read data into.</param>
        /// <returns>The number of chars read.</returns>
        public long ReadChars(MemoryFile.CharStorage storage) { return THFile_readChar(handle, storage.handle); }

        [DllImport("caffe2")]
        private static extern long THFile_writeChar(HType self, MemoryFile.CharStorage.HType storage);

        /// <summary>
        ///   Write chars to the file from the given storage.
        /// </summary>
        /// <param name="storage">A storage object fetch data from.</param>
        /// <returns>The number of chars written.</returns>
        public long WriteChars(MemoryFile.CharStorage storage) { return THFile_writeChar(handle, storage.handle); }
    }
}