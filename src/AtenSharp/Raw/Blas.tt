<#@ Template Language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Output Extension=".generated.cs" #>
<#@ Include File="Types.ttinclude" #>

using System;
using System.Runtime.InteropServices;

namespace AtenSharp.Raw {

    // High-performance vector anad matrix operations.
    internal static class Blas {
<#
foreach (var type in AtenTypeDef.Types) {
#>

        // *** Level 1

        // Swap x and y.
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(swap)(
        //     int64_t n, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_swap(
            long n,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        // Evaluate x = a * x
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(scal)(
        //     int64_t n, scalar_t a, scalar_t *x, int64_t incx);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_scal(
            long n,
            <#=type.Storage#> a,
            <#=type.Ptr#> x,
            long incx);

        // Copy x into y.
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(copy)(
        //     int64_t n, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_copy(
            long n,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        // Evaluate y = a * x + y.
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(axpy)(
        //     int64_t n, scalar_t a, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_axpy(
            long n,
            <#=type.Storage#> a,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        // Evaluate the dot product.
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API scalar_t THBlas_(dot)(
        //     int64_t n, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        [DllImport ("caffe2")]
        internal private static extern <#=type.Storage#> TH<#=type.Name#>Blas_dot(
            long n,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        // *** Level 2

        // Matrix-vector multiplication.
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(gemv)(
        //     char trans, int64_t m, int64_t n, scalar_t alpha,
        //     scalar_t *a, int64_t lda, scalar_t *x, int64_t incx,
        //     scalar_t beta, scalar_t *y, int64_t incy);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_gemv(
            byte trans,
            long m,
            long n,
            <#=type.Storage#> alpha,
            <#=type.Ptr#> a,
            long lda,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Storage#> beta,
            <#=type.Ptr#> y,
            long incy);

        // Rank 1 operation A := alpha * x * y' + A
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(ger)(
        //     int64_t m, int64_t n, scalar_t alpha, scalar_t *x, int64_t incx,
        //     scalar_t *y, int64_t incy, scalar_t *a, int64_t lda);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_ger(
            long m,
            long n,
            <#=type.Storage#> alpha,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy,
            <#=type.Ptr#> a,
            long lda);

        // *** Level 3

        // Matrix-matrix multiplication.
        //
        // Corresponds to the following TH declaration:
        //
        // TH_API void THBlas_(gemm)(
        //     char transa, char transb, int64_t m, int64_t n, int64_t k,
        //     scalar_t alpha, scalar_t *a, int64_t lda, scalar_t *b, int64_t ldb,
        //     scalar_t beta, scalar_t *c, int64_t ldc);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Blas_gemm(
            byte transa,
            byte transb,
            long m,
            long n,
            long k,
            <#=type.Storage#> alpha,
            <#=type.Ptr#> a,
            long lda,
            <#=type.Ptr#> b,
            long ldb,
            <#=type.Storage#> beta,
            <#=type.Ptr#> c,
            long ldc);
<# } #>
    }
}