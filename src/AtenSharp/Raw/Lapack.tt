<#@ Template Language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Output Extension=".generated.cs" #>
<#@ Include File="Types.ttinclude" #>

using System;
using System.Runtime.InteropServices;

namespace AtenSharp.Raw {

    // High-performance linear algebra operations.
    internal static class Lapack {
<#
foreach (var type in AtenTypeDef.Types) {

    string tIntPtr  = "IntPtr /* int* */";
#>

        // Solve AX=B
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(gesv)(
        //     int n, int nrhs, scalar_t *a, int lda, int *ipiv,
        //      scalar_t *b, int ldb, int* info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_gesv(
            int n,
            int nrhs,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> ipiv,
            <#=type.Ptr#> b,
            int ldb,
            <#=tIntPtr#> info);

        // Solve a triangular system of the form A * X = B or A^T * X = B
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(trtrs)(
        //     char uplo, char trans, char diag, int n, int nrhs,
        //     scalar_t *a, int lda, scalar_t *b, int ldb, int* info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_trtrs(
            byte uplo,
            byte trans,
            byte diag,
            int n,
            int nrhs,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> b,
            int ldb,
            <#=tIntPtr#> info);

        // Evaluate ||AX-B||
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(gels)(
        //     char trans, int m, int n, int nrhs, scalar_t *a, int lda,
        //     scalar_t *b, int ldb, scalar_t *work, int lwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_gels(
            byte trans,
            int m,
            int n,
            int nrhs,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> b,
            int ldb,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);

        // Eigenvals
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(syev)(
        //     char jobz, char uplo, int n, scalar_t *a, int lda,
        //     scalar_t *w, scalar_t *work, int lwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_syev(
            byte jobz,
            byte uplo,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> w,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);

        // Non-sym eigenvals
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(geev)(
        //     char jobvl, char jobvr, int n, scalar_t *a, int lda,
        //     scalar_t *wr, scalar_t *wi, scalar_t* vl, int ldvl,
        //     scalar_t *vr, int ldvr, scalar_t *work, int lwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_geev(
            byte jobvl,
            byte jobvr,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> wr,
            <#=type.Ptr#> wi,
            <#=type.Ptr#> vl,
            int ldvl,
            <#=type.Ptr#> vr,
            int ldvr,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);

        // SVD
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(gesdd)(
        //     char jobz, int m, int n, scalar_t *a, int lda, scalar_t *s,
        //     scalar_t *u, int ldu, scalar_t *vt, int ldvt,
        //     scalar_t *work, int lwork, int *iwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_gesdd(
            byte jobz,
            int m,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> s,
            <#=type.Ptr#> u,
            int ldu,
            <#=type.Ptr#> vt,
            int ldvt,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> iwork,
            <#=tIntPtr#> info);

        // LU decomposition
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(getrf)(
        //     int m, int n, scalar_t *a, int lda, int *ipiv, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_getrf(
            int m,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> ipiv,
            <#=tIntPtr#> info);

        // LU decomposition
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(getrs)(
        //     char trans, int n, int nrhs, scalar_t *a, int lda,
        //     int *ipiv, scalar_t *b, int ldb, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_getrs(
            byte trans,
            int n,
            int nrhs,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> ipiv,
            <#=type.Ptr#> b,
            int ldb,
            <#=tIntPtr#> info);

        // Matrix Inverse
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(getri)(
        //     int n, scalar_t *a, int lda, int *ipiv,
        //     scalar_t *work, int lwork, int* info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_getri(
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> ipiv,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);

        // *** Positive Definite matrices

        // Cholesky factorization
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(potrf)(
        //     char uplo, int n, scalar_t *a, int lda, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_potrf(
            byte uplo,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> info);

        // Matrix inverse based on Cholesky factorization
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(potri)(
        //     char uplo, int n, scalar_t *a, int lda, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_potri(
            byte uplo,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> info);

        // Solve A*X = B with a symmetric positive definite matrix A
        // using the Cholesky factorization.
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(potrs)(
        //     char uplo, int n, int nrhs, scalar_t *a, int lda,
        //     scalar_t *b, int ldb, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_potrs(
            char uplo,
            int n,
            int nrhs,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> b,
            int ldb,
            <#=tIntPtr#> info);

        // Cholesky factorization with complete pivoting.
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(pstrf)(
        //     char uplo, int n, scalar_t *a, int lda, int *piv,
        //     int *rank, scalar_t tol, scalar_t *work, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_pstrf(
            byte uplo,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=tIntPtr#> piv,
            <#=tIntPtr#> rank,
            <#=type.Storage#> tol,
            <#=type.Ptr#> work,
            <#=tIntPtr#> info);

        // QR decomposition.
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(geqrf)(
        //     int m, int n, scalar_t *a, int lda,
        //     scalar_t *tau, scalar_t *work, int lwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_geqrf(
            int m,
            int n,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> tau,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);

        // Build Q from output of geqrf
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(orgqr)(
        //     int m, int n, int k, scalar_t *a, int lda,
        //     scalar_t *tau, scalar_t *work, int lwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_orgqr(
            int m,
            int n,
            int k,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> tau,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);

        // Multiply Q with a matrix from output of geqrf
        //
        // Corresponds to the following TH definition:
        //
        // TH_API void THLapack_(ormqr)(
        //     char side, char trans, int m, int n, int k,
        //     scalar_t *a, int lda, scalar_t *tau, scalar_t *c, int ldc,
        //     scalar_t *work, int lwork, int *info);
        [DllImport ("caffe2")]
        internal private static extern void TH<#=type.Name#>Lapack_ormqr(
            byte side,
            byte trans,
            int m,
            int n,
            int k,
            <#=type.Ptr#> a,
            int lda,
            <#=type.Ptr#> tau,
            <#=type.Ptr#> c,
            int ldc,
            <#=type.Ptr#> work,
            int lwork,
            <#=tIntPtr#> info);
<# } #>
    }
}
